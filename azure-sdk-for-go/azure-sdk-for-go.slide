Azure SKD for GoでAzure Monitorを使う
Go(Un)Conference（Goあんこ）LT大会 5kg
31 Jan 2019

Takatada Yoshima
@shiimaxx


* About me

.image images/shiimaxx.png

- Takatada Yoshima / @shiimaxx
- Infrastructure Engineer


* Agenda

- Azure Monitor
- Azure SDK for Go
- Azure SDK for GoでAzure Monitorを使う


* Azure Monitor


* Azure Monitor

Microsoft Azureのモニタリングサービス

.image images/azure-monitor.png 450 _
.caption [[https://docs.microsoft.com/en-us/azure/azure-monitor/overview][Azure Monitor overview]]


* Azure Monitor

- Azure/オンプレミス上の各種リソースをデータソースとしてそれらのログやメトリックを保存するデータストア
- そのデータを元に可視化、分析、アラーティングなどを行う機能

を提供しているサービス


* Azure Monitor - Alerts

Azure Monitorのアラーティング機能では、Alert RuleとActionを定義する

Alert Rule:
ターゲットリソース、シグナル(ターゲットリソースから生成されるログ、メトリックなど)とそのアラート基準からなる

Acrtion:
アラートルールの条件を満たしたときに実行される


* Azure Monitor - Alert

発生したアラートはステータスを持ち、ユーザはそのステータスを管理することができる

- New: 新規に発生、未確認
- Acknowledged: 確認して作業開始済み
- Closed: 解決済み


* Azure SDK for Go


* Azure SDK for Go

Azure APIのGo SDK

.link https://github.com/Azure/azure-sdk-for-go Github - Azure/azure-sdk-for-go


* Azure SDK for Go - Versioning

SDKバージョンとService APIバージョンという2つのバージョニングの概念がある


* Azure SDK for Go - SDKバージョン

SDK自体のバージョン、Gitタグによって表される
Semantic Versioningであり、メジャーバージョンの変更以外でのBreaking Changeはない


* Azure SDK for Go - Service APIバージョン

Azure APIのバージョン、 `YYYY-MM-DD` 形式の日付文字列で表される
バージョンはserviceモジュール配下のインポートパスの一部になっている

ex)
`"github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2018-10-01/compute"`

インポートパスによってService APIバージョンを固定しておくことで、Azure API側の変更の影響を避けられる


* Azure SDK for Go - 利用の流れ

利用するサービス(Compute, Networkなど)のパッケージをインポート

    import "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2018-10-01/compute"

サービスクライアントを作成

    vmClient := compute.NewVirtualMachinesClient(<subscription id>)

サービスクライアントにAuthorizerを設定

    import "github.com/Azure/go-autorest/autorest/azure/auth"

    a, err := auth.NewAuthorizerFromEnvironment()
    if err == nil {
        vmClient.Authorizer = a
    }

メソッド呼び出し

    vmClient.Get(context.TODO(), <resource group name>, <virtual machine name>)


* Azure SDK for Go - 利用の流れ

利用するサービス(Compute, Networkなど)のパッケージをインポート

    import "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2018-10-01/compute"

サービスクライアントを作成

    vmClient := compute.NewVirtualMachinesClient(<subscription id>)

*サービスクライアントにAuthorizerを設定*

    import "github.com/Azure/go-autorest/autorest/azure/auth"

    a, err := auth.NewAuthorizerFromEnvironment()
    if err == nil {
        vmClient.Authorizer = a
    }

メソッド呼び出し

    vmClient.Get(context.TODO(), <resource group name>, <virtual machine name>)


* Azure SDK for Go - Authentication

Azure SDK for Goでは認証方法をいくつかのタイプから選択できる

認証タイプは、サービスクライアントにセットするAuthorizerによって変わる

Authorizerを作成する関数は、github.com/Azure/go-autorest/autorest/azure/authパッケージで提供されている


* Azure SDK for Go - Authentication

    a, err := auth.NewAuthorizerFromEnvironment()
    if err == nil {
        vmClient.Authorizer = a
    }

`auth.NewAuthorizerFromEnvironment()` は認証情報を環境変数から読み込む

他にも

- 認証情報をファイルから読み込む → `auth.NewAuthorizerFromFile()`
- Azure CLIで認証 → `auth.NewAuthorizerFromCLI()`

などがある


* Azure SDK for GoでAzure Monitorを使ってみる


* Azure SDK for GoでAzure Monitorを使ってみる - モチベーション

- アラーティング機能のアラートステータスをチェックするNagiosプラグインを作りたい
- AzureリソースのメトリックをAzure Monitorから取得したい


* Azure Monitorのアラーティング機能で発生したアラートを取得

パッケージをインポート

    import (
        ...
        "github.com/Azure/azure-sdk-for-go/services/alertsmanagement/mgmt/2018-05-05/alertsmanagement"
        "github.com/Azure/go-autorest/autorest/azure/auth"
    )

サービスクライアントを作成

    alertsClient := alertsmanagement.NewAlertsClient(subscriptionID)

サービスクライアントにAuthorizerを設定

    a, err := auth.NewAuthorizerFromEnvironment()
    if err == nil {
        alertsClient.Authorizer = a
    }


* Azure Monitorのアラーティング機能で発生したアラートを取得

メソッド呼び出し　(このメソッドは引数が多い、かつデフォルトでよいものも空値を指定する必要があるので使い勝手があまりよくないですね...)

    f := false
    result, err := alertsClient.GetAll(
        context.TODO(),
        "",
        "",
        "",
        "",
        alertsmanagement.Fired,
        alertsmanagement.Severity(""),
        alertsmanagement.AlertStateNew,
        "",
        "",
        &f,
        &f,
        nil,
        alertsmanagement.AlertsSortByFieldsLastModifiedDateTime,
        "desc",
        "",
        "",
        "",
    )


* Azure Monitorのアラーティング機能で発生したアラートを取得

アラートのタイプ、該当するAlert Ruleの名前、ターゲットリソースのリソースグループなどの情報を取得できる

    $ go run get_alert.go
    Type:  Microsoft.AlertsManagement/alerts
    Name:  アラートテスト
    ResourceGroup:  demo-rg


* まとめ

Azure MonitorはAzure/オンプレミス上のメトリック、ログを保存し、それ利用する様々な機能(可視化、アラーティングなど)を提供する

Azure SDK for GoはAzure API用のGo SDK
サービスクライアントを作成 → Authorizerを設定 → メソッド呼び出し という流れで利用する

Azure SDK for Goを使ってAzure MonitorのAPIからアラート情報を取得してみた
SDKのAPIは一部使いづらい部分があるので、独自の関数やパッケージなどでラップしてあげるのがよさそう
